version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.1

commands:
  # Rollbacks
  notify-on-failure:
    steps:
      - slack/notify:
          mentions: "@Shehu Yakubu"
          event: fail
          template: basic_fail_1
  
  notify-slack-pass:
    steps:
      - slack/notify:
          mentions: "@Shehu Yakubu"
          event: pass
          template: basic_success_1
  
  # Destroy environment
  destroy-environment:
    description: Destroy backend and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    
    steps:
      - run:
          name: "Destroy environments"
          when: on_fail
          command: |
            # Empty frontend bucket
            echo "Destroying environment: << parameters.Workflow_ID >>"
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            
            # Delete frontend stack
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
            
            # Delete backend stack
            aws cloudformation delete-stack\
              --stack-name udapeople-backend-<< parameters.Workflow_ID >>
  
  # Revert migration
  revert-migrations:
    description: "Revert the last migration if successfully run in the current workflow."
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    
    steps:
      - run:
          name: "Revert migrations"
          when: on_fail
          command: |
            # Sending migrations to 3rd party - kvdb.io
            SUCCESS=$(curl --insecure https://kvdb.io/9bL3qcS3G4YhbiEwh1vnVf/migration_<< parameters.Workflow_ID >>)
            
            if(( $SUCCESS == 1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migration:revert
            fi
            
jobs:
  # Build frontend job
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    
    steps:
      - checkout

      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  # Build backend job
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    
    steps:
      - checkout

      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
      # - notify-slack-failure
      # - notify-slack-pass

  # Test frontend job
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    
    steps:
      - checkout

      - restore_cache:
          keys: [frontend-test]
      
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
      
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
  
  # Test backend job
  test-backend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      
      - restore_cache:
          keys: [backend-test]
      
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
      
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
  
  # Scan frontend job
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      
      - restore_cache:
          keys: [scan-frontend]
      
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical 
            npm audit fix --force

  # Scan backend job
  scan-backend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      
      - restore_cache:
          keys: [scan-backend]
      
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical 
            npm audit fix --force

  # Deploy infrastructure job
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      
      - run:
          name: Install tar gzip
          command: |
            yum install -y tar gzip
      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
               --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # BACKEND_IP=$(aws ec2 describe-instances \
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
              
              cat ~/project/.circleci/ansible/inventory.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment

  # Configure infrastructure job
  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16

    steps:
      - checkout
      
      - add_ssh_keys:
          fingerprints: ["23:24:20:3e:d3:93:e0:da:b5:0d:4d:71:55:5f:83:07"]
      
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip aws-cli openssh
      
      - run:
          name: configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat ~/project/.circleci/ansible/inventory.txt

  # Migrations job
  run-migrations:
    docker:
      - image: circleci/node:latest

    steps:
      - checkout
      
      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      
      - run:
          name: Send migration results to kvdb.io OR memstash.io
          command: |
            # sudo apt-get update && sudo apt-get install -y ca-certificates
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/9bL3qcS3G4YhbiEwh1vnVf/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi

  # Deploy frontend job
  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16
      # - image: amazon/aws-cli
    
    steps:
      - checkout

      - run:
          name: Install tar and gzip
          command: |
            apk add --update tar gzip
            # yum install -y tar gzip

      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm curl
            pip install awscli
            # yum install -y curl
            # curl -sL https://rpm.nodesource.com/setup_10.x
            # yum install -y nodejs
      
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_API}:3030" >> frontend/.env
            cat frontend/.env
      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build

            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - destroy-environment
      - revert-migrations
  
  # Deploy backend job
  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    
    steps:
      - checkout
      
      - add_ssh_keys:
          fingerprints: ["23:24:20:3e:d3:93:e0:da:b5:0d:4d:71:55:5f:83:07"]
      
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm curl
            pip install awscli
      
      - run:
          name: Deploy backend
          command: |
            pwd
            cd backend

            touch .env
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            pwd
            ls -al
            npm install
            npm run build
            cd ..

            pwd
            ls -al
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - destroy-environment
      - revert-migrations

  # Smoke test job
  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    
    steps:
      - checkout
      
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm curl
            pip install awscli
      
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo "${BACKEND_IP}"

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"

            echo "Sleeping for 1 minute"
            sleep 60
            
            if curl "${API_URL}/api/status" | sudo grep "ok"
            then
                return 0
            else
                return 1
            fi
      
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            
            echo ${URL} 
            
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      
      - destroy-environment
      - revert-migrations

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend

      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]

      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      
      - configure-infrastructure:
          requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]

      - smoke-test:
          requires: [deploy-backend, deploy-frontend]

      # - cloudfront-update:
      #     requires: [smoke-test]

      # - cleanup:
      #     requires: [cloudfront-update]